{"ast":null,"code":"var _jsxFileName = \"/Users/moxy/GreenTea-Lemon/Vue3/code/ts_music/src/views/index.tsx\",\n  _s = $RefreshSig$();\nimport React, { Suspense, memo } from 'react';\nimport { useRoutes, Link } from 'react-router-dom';\nimport { useSelector, shallowEqual } from 'react-redux';\nimport routes from '@/router';\nimport store from '@/store';\n\n//[1] getState() 返回一个state对象，获得store中的所有state。而我们希望获得这个state对象的所有类型\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst state = store.getState();\n//[2]本质上，state对象的类型，就是 getState 这个函数的返回值类型。所以，问题变为获取 getState 的返回值类型\n// 获取函数的返回值类型，要两步：1获取函数类型，2获取函数返回值类型\n//[2.1]获取getState函数的类型：\n//[2.2]获取getState函数的返回值类型：\nconst Main = () => {\n  _s();\n  const {\n    count,\n    message\n  } = useSelector(state => ({\n    count: state.counter.count,\n    message: state.counter.message\n  }), shallowEqual);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"nav\",\n      children: [/*#__PURE__*/_jsxDEV(Link, {\n        to: \"./discover\",\n        children: \"\\u53D1\\u73B0\\u97F3\\u4E50\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Link, {\n        to: \"./mine\",\n        children: \"\\u6211\\u7684\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"\\u5F53\\u524D\\u8BA1\\u6570\\uFF1A\", count]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"\\u5F53\\u524D\\u6D88\\u606F\\uFF1A\", message]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Suspense, {\n      fallback: 'loading component...',\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main\",\n        children: useRoutes(routes)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n};\n_s(Main, \"cqb+dI1y+u7UU574Kid/pe5XFHs=\", false, function () {\n  return [useSelector, useRoutes];\n});\n_c = Main;\nexport default _c2 = /*#__PURE__*/memo(Main);\nvar _c, _c2;\n$RefreshReg$(_c, \"Main\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"names":["React","Suspense","memo","useRoutes","Link","useSelector","shallowEqual","routes","store","jsxDEV","_jsxDEV","state","getState","Main","_s","count","message","counter","className","children","to","fileName","_jsxFileName","lineNumber","columnNumber","fallback","_c","_c2","$RefreshReg$"],"sources":["/Users/moxy/GreenTea-Lemon/Vue3/code/ts_music/src/views/index.tsx"],"sourcesContent":["import React, { Suspense, memo } from 'react';\nimport type { FC, ReactNode } from 'react';\nimport { useRoutes, Link } from 'react-router-dom';\nimport { useSelector, shallowEqual } from 'react-redux';\nimport routes from '@/router';\nimport store from '@/store';\n\n//[1] getState() 返回一个state对象，获得store中的所有state。而我们希望获得这个state对象的所有类型\nconst state = store.getState();\n//[2]本质上，state对象的类型，就是 getState 这个函数的返回值类型。所以，问题变为获取 getState 的返回值类型\n// 获取函数的返回值类型，要两步：1获取函数类型，2获取函数返回值类型\n//[2.1]获取getState函数的类型：\ntype GetStateFnType = typeof store.getState;\n//[2.2]获取getState函数的返回值类型：\ntype FnReturnType = ReturnType<GetStateFnType>;\n\n\ninterface IProps {\n  children?: ReactNode;\n}\n\nconst Main: FC<IProps> = (): JSX.Element => {\n  const { count, message } = useSelector(\n    (state: any) => ({\n      count: state.counter.count,\n      message: state.counter.message\n    }),\n    shallowEqual\n  );\n\n  return (\n    <div className=\"container\">\n      <div className=\"nav\">\n        <Link to=\"./discover\">发现音乐</Link>\n        <Link to=\"./mine\">我的</Link>\n      </div>\n      <div>当前计数：{count}</div>\n      <div>当前消息：{message}</div>\n      <Suspense fallback={'loading component...'}>\n        <div className=\"main\">{useRoutes(routes)}</div>\n      </Suspense>\n    </div>\n  );\n};\n\nexport default memo(Main);\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,IAAI,QAAQ,OAAO;AAE7C,SAASC,SAAS,EAAEC,IAAI,QAAQ,kBAAkB;AAClD,SAASC,WAAW,EAAEC,YAAY,QAAQ,aAAa;AACvD,OAAOC,MAAM,MAAM,UAAU;AAC7B,OAAOC,KAAK,MAAM,SAAS;;AAE3B;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,KAAK,GAAGH,KAAK,CAACI,QAAQ,CAAC,CAAC;AAC9B;AACA;AACA;AAEA;AAQA,MAAMC,IAAgB,GAAGA,CAAA,KAAmB;EAAAC,EAAA;EAC1C,MAAM;IAAEC,KAAK;IAAEC;EAAQ,CAAC,GAAGX,WAAW,CACnCM,KAAU,KAAM;IACfI,KAAK,EAAEJ,KAAK,CAACM,OAAO,CAACF,KAAK;IAC1BC,OAAO,EAAEL,KAAK,CAACM,OAAO,CAACD;EACzB,CAAC,CAAC,EACFV,YACF,CAAC;EAED,oBACEI,OAAA;IAAKQ,SAAS,EAAC,WAAW;IAAAC,QAAA,gBACxBT,OAAA;MAAKQ,SAAS,EAAC,KAAK;MAAAC,QAAA,gBAClBT,OAAA,CAACN,IAAI;QAACgB,EAAE,EAAC,YAAY;QAAAD,QAAA,EAAC;MAAI;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,eACjCd,OAAA,CAACN,IAAI;QAACgB,EAAE,EAAC,QAAQ;QAAAD,QAAA,EAAC;MAAE;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxB,CAAC,eACNd,OAAA;MAAAS,QAAA,GAAK,gCAAK,EAACJ,KAAK;IAAA;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eACvBd,OAAA;MAAAS,QAAA,GAAK,gCAAK,EAACH,OAAO;IAAA;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eACzBd,OAAA,CAACT,QAAQ;MAACwB,QAAQ,EAAE,sBAAuB;MAAAN,QAAA,eACzCT,OAAA;QAAKQ,SAAS,EAAC,MAAM;QAAAC,QAAA,EAAEhB,SAAS,CAACI,MAAM;MAAC;QAAAc,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACvC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACR,CAAC;AAEV,CAAC;AAACV,EAAA,CAtBID,IAAgB;EAAA,QACOR,WAAW,EAiBTF,SAAS;AAAA;AAAAuB,EAAA,GAlBlCb,IAAgB;AAwBtB,eAAAc,GAAA,gBAAezB,IAAI,CAACW,IAAI,CAAC;AAAC,IAAAa,EAAA,EAAAC,GAAA;AAAAC,YAAA,CAAAF,EAAA;AAAAE,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}