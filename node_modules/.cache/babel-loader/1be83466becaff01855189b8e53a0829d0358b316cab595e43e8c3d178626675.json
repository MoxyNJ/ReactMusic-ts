{"ast":null,"code":"import { configureStore } from '@reduxjs/toolkit';\nimport { useSelector } from 'react-redux';\nimport counterReducer from './modules/counter';\nconst store = configureStore({\n  reducer: {\n    counter: counterReducer\n  }\n});\n// 更近一步，我们期望组件中无需再引入IRootState类型，限制state的选择；而是在使用store的state时，Ts可自动提示有哪些state可用\n// TypedUseSelectorHook类型，该类型需传入一个范型，称为Tstate。\n// TypedUseSelectorHook规定其本身是一个函数\n会把该范型Tstate作为其返回值的第一个参数;\nuseAppSelector;\n//\n\nexport const useAppSelector = useSelector();\nexport default store;","map":{"version":3,"names":["configureStore","useSelector","counterReducer","store","reducer","counter","会把该范型Tstate作为其返回值的第一个参数","useAppSelector"],"sources":["/Users/moxy/GreenTea-Lemon/Vue3/code/ts_music/src/store/index.ts"],"sourcesContent":["import { configureStore } from '@reduxjs/toolkit';\nimport { useSelector, TypedUseSelectorHook } from 'react-redux';\n\nimport counterReducer from './modules/counter';\n\nconst store = configureStore({\n  reducer: {\n    counter: counterReducer\n  }\n});\n\ntype GetStateFnType = typeof store.getState;\nexport type IRootState = ReturnType<GetStateFnType>;\n\n// 更近一步，我们期望组件中无需再引入IRootState类型，限制state的选择；而是在使用store的state时，Ts可自动提示有哪些state可用\n// TypedUseSelectorHook类型，该类型需传入一个范型，称为Tstate。\n// TypedUseSelectorHook规定其本身是一个函数\n会把该范型Tstate作为其返回值的第一个参数\nuseAppSelector\n//\n\nexport const useAppSelector: TypedUseSelectorHook<IRootState> = useSelector();\n\nexport default store;\n"],"mappings":"AAAA,SAASA,cAAc,QAAQ,kBAAkB;AACjD,SAASC,WAAW,QAA8B,aAAa;AAE/D,OAAOC,cAAc,MAAM,mBAAmB;AAE9C,MAAMC,KAAK,GAAGH,cAAc,CAAC;EAC3BI,OAAO,EAAE;IACPC,OAAO,EAAEH;EACX;AACF,CAAC,CAAC;AAKF;AACA;AACA;AACAI,uBAAuB;AACvBC,cAAc;AACd;;AAEA,OAAO,MAAMA,cAAgD,GAAGN,WAAW,CAAC,CAAC;AAE7E,eAAeE,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}